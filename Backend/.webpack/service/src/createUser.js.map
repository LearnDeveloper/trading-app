{"version":3,"file":"src/createUser.js","mappings":"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","sources":["webpack://trading-learning-app-api/external commonjs \"aws-sdk\"","webpack://trading-learning-app-api/external commonjs \"mongodb\"","webpack://trading-learning-app-api/external commonjs \"nodemailer\"","webpack://trading-learning-app-api/webpack/bootstrap","webpack://trading-learning-app-api/./src/createUser.ts"],"sourcesContent":["module.exports = require(\"aws-sdk\");","module.exports = require(\"mongodb\");","module.exports = require(\"nodemailer\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { MongoClient } = require('mongodb');\r\nconst AWS = require('aws-sdk');\r\nvar nodemailer = require('nodemailer');\r\n\r\nconst currentDateAndTime = new Date();\r\nconst OTP = Math.floor(1000 + Math.random() * 9000);\r\nconsole.log(OTP);\r\nconst characters = 'LRN0123456789';\r\nconst randomIndex = Math.floor(Math.random() * 67845);\r\nconsole.log(randomIndex);\r\n\r\n\r\n// Initialize the code as an empty string\r\nconst referrercode = `LRN${randomIndex}`;\r\n\r\nconst currentYear = currentDateAndTime.getFullYear();\r\nconst currentMonth = currentDateAndTime.getMonth() + 1; // Months are 0-indexed, so add 1\r\nconst currentDay = currentDateAndTime.getDate();\r\nconst currentHours = currentDateAndTime.getHours();\r\nconst currentMinutes = currentDateAndTime.getMinutes();\r\nconst currentSeconds = currentDateAndTime.getSeconds();\r\n\r\n\r\n// let Testevent:any = \r\n// {\r\n//   \"path\" : \"resend\",\r\n//   \"user_id\" : \"learn_0000001\",\r\n//   \"full_name\" : \"Vikas Chandra Guru\",\r\n//   \"Phone_Number\" : \"9731243153\",\r\n//   \"email\" : \"vikastheshit@gmail.com\",\r\n//   \"password\" : \"password\",\r\n//   \"device_info\" : {\r\n//     \"isMobile\" : false,\r\n//     \"isTablet\" : false,\r\n//     'isDesktop': true,\r\n//     \"deviceType\" : \"\",\r\n//     \"OS\" : \"\",\r\n//     \"osVersion\" : \"\",\r\n//     \"screen_resolution\": \"\",\r\n//     \"userAgent\" : \"\"\r\n//   },\r\n//   \"created_date\" : `${currentDay}-${currentMonth}-${currentYear}:${currentHours}:${currentMinutes}:${currentSeconds}`,\r\n//   \"language\" : \"\",\r\n//   \"firebase_token\" : \"\",\r\n//   \"isActive\" : true,\r\n//   \"isBanned\" : false\r\n// }\r\n//   \"path\" : \"create\",\r\n//   \"user_id\": \"learn_Admin\",\r\n//   \"full_name\": \"Alessio Devangelista\",\r\n//   \"Phone_Number\": \"12345671891\",\r\n//   \"email\": \"alessiodevangelista@l-earn.com\",\r\n//   \"password\": \"password\",\r\n//   \"device_info\": {\r\n//       \"isMobile\": false,\r\n//       \"isTablet\": false,\r\n//       \"isDesktop\": true,\r\n//       \"deviceType\": \"\",\r\n//       \"OS\": \"\",\r\n//       \"osVersion\": \"\",\r\n//       \"screen_resolution\": \"\",\r\n//       \"userAgent\": \"\"\r\n//   },\r\n//   \"created_date\":\"10-09-2023:03:53:22\",\r\n//   \"language\": \"\",\r\n//   \"firebase_token\": \"\",\r\n//   \"isActive\": true,\r\n//   \"isBanned\":false,\r\n//   \"isAdmin\" : true\r\n// }\r\n\r\n\r\n// MongoDB connection URL\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\nlet cachedDb = null;\r\nasync function getLastUserID() {\r\n  if (cachedDb) {\r\n    return cachedDb;\r\n  }\r\n\r\n  // Connect to our MongoDB database hosted on MongoDB Atlas\r\n  const client = await MongoClient.connect(MONGODB_URI);\r\n\r\n  // Specify which database we want to use\r\n  const db = await client.db(\"trading-app-dev\");\r\n\r\n  cachedDb = db;\r\n  const LastUserId = await db\r\n  .collection(\"LEARN_USERS\").find()\r\n  .sort({ _id: -1 }).limit(1).toArray();\r\n  client.close();\r\n  return LastUserId;\r\n}\r\n\r\nasync function generateUserID(user){\r\n// Input string representing the number with leading zeros\r\nconst inputStr = user[0].user_id.split('_')[1];\r\nconsole.log(\"inputStr\",inputStr);\r\n\r\n\r\n// Convert the input string to a number\r\nconst currentNumber = parseInt(inputStr, 10);\r\n\r\n// Increment the number by one\r\nconst incrementedNumber = currentNumber + 1;\r\n\r\n// Determine the desired width of the output string (including leading zeros)\r\nconst width = inputStr.length;\r\n\r\n// Format the incremented number as a string with leading zeros\r\nconst formattedStr = String(incrementedNumber).padStart(width, \"0\");\r\n\r\nconsole.log(formattedStr); // Output: \"0000002\"\r\nreturn formattedStr;\r\n}\r\n\r\n\r\n\r\nasync function createUserinDB(id,payload) {\r\n  console.log(\"payload\",payload);\r\n  try {\r\n    // Connect to MongoDB\r\n    const client = new MongoClient(MONGODB_URI);\r\n    await client.connect();\r\n\r\n    // Get a reference to the database and collection\r\n    const db = client.db('trading-app-dev');\r\n    const collection = db.collection('LEARN_USERS');\r\n\r\n    let data :any = {\r\n      \"user_id\" : `learn_${id}`,\r\n      \"full_name\" : payload.full_name,\r\n      \"Phone_Number\" : payload.Phone_Number,\r\n      \"email\" : payload.email,\r\n      \"password\" : payload.password,\r\n      \"device_info\" : {\r\n        \"isMobile\" : payload.device_info.isMobile,\r\n        \"isTablet\" : payload.device_info.isTablet,\r\n        'isDesktop': payload.device_info.isDesktop,\r\n        \"deviceType\" : payload.device_info.deviceType,\r\n        \"OS\" : payload.device_info.OS,\r\n        \"osVersion\" : payload.device_info.osVersion,\r\n        \"screen_resolution\": payload.device_info.screen_resolution,\r\n        \"userAgent\" : payload.device_info.userAgent,\r\n      },\r\n      \"created_date\" : `${currentDay}-${currentMonth}-${currentYear}:${currentHours}:${currentMinutes}:${currentSeconds}`,\r\n      \"language\" : payload.language,\r\n      \"firebase_token\" : payload.firebase_token,\r\n      \"isActive\" : payload.isActive,\r\n      \"isBanned\" : false,\r\n      \"OTP\" : OTP,\r\n      \"refferral_code\":referrercode,\r\n      \"refferred_code\" : payload.refferred_code,\r\n      \"isDeleted\" : false,\r\n      \"isSubscribed\":true\r\n    }\r\n\r\n\r\n    console.log(\"data\",data)\r\n    let email = data.email;\r\n    \r\n    // Insert user data into the collection\r\n    const result = await collection.insertOne(data);\r\n\r\n    // Close the MongoDB connection\r\n    // client.close();\r\n    const sendMail = await sendOTP(payload);\r\n    // console.log('sendMail',sendMail);\r\n    // const client = new MongoClient(MONGODB_URI);\r\n    // await client.connect();\r\n\r\n    const userDetails = await db\r\n    .collection(\"LEARN_USERS\")\r\n    .find({email})\r\n    .toArray();\r\n\r\n    console.log(userDetails);\r\n    console.log(sendMail);\r\n    return {\r\n      statusCode: 200,\r\n      'headers': {\r\n        'Access-Control-Allow-Origin': '*'\r\n    },\r\n      body: JSON.stringify({ message: 'User created successfully', data: userDetails,responseCode : '1000' }),\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ message: 'Error creating user' }),\r\n    };\r\n  }\r\n  \r\n}\r\n\r\nasync function sendOTP(payload): Promise<void> {\r\n  const transporter = nodemailer.createTransport({\r\n    service: 'SMTP',\r\n    host: 'smtp.hostinger.com',\r\n    port: 465,\r\n    secure: true, // Set to true if your SMTP server requires a secure connection (e.g., for Gmail, set it to true)\r\n    auth: {\r\n        user: 'notify@l-earn.pro',\r\n        pass: 'Notify@2023l-earnPro',\r\n    },\r\n});\r\n\r\nconsole.log('SMTP Configured');\r\n\r\n// Message object\r\n  var message = {\r\n\r\n  // sender info\r\n  from: 'notify@l-earn.pro',\r\n\r\n   // Comma separated list of recipients\r\n  to: payload.email,\r\n\r\n   // Subject of the message\r\n  subject: \"Welcome to L-EARN\", //'Nodemailer is unicode friendly ✔', \r\n\r\n  // plaintext body\r\n  //  text: \"Hello\" //'Hello to myself!',\r\n\r\n  // HTML body\r\n   html:'<span style=\"text-align:left;background-color: linear-gradient(220deg, rgba(246,246,246,1) 50%, rgba(140,159,255,1) 100%)\"><h1 style=\"padding:20px;\"><b>Welcome to L-EARN</b></h1>'+\r\n     '<p style=\"text-align:\"left\">Dear'+payload.full_name+'</p><br><p>Thank you for signing up for our service. We are excited to have you as a member!</p><br><p>Here are some key details about your account:</p><br><ul><li>Email:'+payload.full_name+'</li><li>Password:'+payload.password+'</li><li>OTP:'+OTP+'</li></ul><br><p>If you have any questions or need assistance, please dont hesitate to contact us.</p><br><p>Best regards,<br>L-earn Team</p></span>'\r\n  };\r\n\r\n  console.log('Sending Mail');\r\n  // await new Promise<void>((resolve, reject) => {\r\n  return new Promise<void>((resolve, reject) => {\r\n  transporter.sendMail(message,  (error, info) => {\r\n    if (error) {\r\n      reject(error);\r\n      console.error('Error sending email:', error);\r\n    } else {\r\n      resolve( )\r\n      console.log('Email sent:', info.response);\r\n      // let finalData =  info.response;\r\n      // return finalData;\r\n    }\r\n});\r\n});\r\n}\r\n\r\nasync function resendOTP(payload) {\r\n  // var transport = nodemailer.createTransport({\r\n  //   pool: true,\r\n  //   host: \"smtps.hostinger.com\",\r\n  //   port: 465,\r\n  //   secure: true, // use TLS\r\n  //   auth: {\r\n  //     user: \"notify@l-earn.pro\",\r\n  //     pass: \"Notify@2023l-earnPro\",\r\n  //   },\r\n  // });\r\n  // var transporter = nodemailer.createTransport('smtps://notify@l-earn.pro:Notify@2023l-earnPro@smtp.hostinger.com');\r\n  const transporter = nodemailer.createTransport({\r\n    service: 'SMTP',\r\n    host: 'smtp.hostinger.com',\r\n    port: 465,\r\n    secure: true, // Set to true if your SMTP server requires a secure connection (e.g., for Gmail, set it to true)\r\n    auth: {\r\n        user: 'notify@l-earn.pro',\r\n        pass: 'Notify@2023l-earnPro',\r\n    },\r\n});\r\n  \r\n  console.log('SMTP Configured');\r\n  \r\n  // Message object\r\n    var message = {\r\n  \r\n    // sender info\r\n    from: 'notify@l-earn.pro',\r\n  \r\n     // Comma separated list of recipients\r\n    to: payload.email,\r\n  \r\n     // Subject of the message\r\n    subject: \"check\", //'Nodemailer is unicode friendly ✔', \r\n  \r\n    // plaintext body\r\n    //  text: \"Hello\" //'Hello to myself!',\r\n  \r\n    // HTML body\r\n     html:'<span style=\"text-align:left;background-color: linear-gradient(220deg, rgba(246,246,246,1) 50%, rgba(140,159,255,1) 100%)\"><h1 style=\"padding:20px;\"><b>Welcome to L-EARN</b></h1><br>'+\r\n       '<p style=\"text-align:\"left\">Dear'+payload.full_name+'</p><br><p>Hello '+payload.email+' the OTP is '+OTP+'!</p><br><p>If you have any questions or need assistance, please dont hesitate to contact us.</p><br><p>Best regards,<br>L-earn Team</p></span>'\r\n    };\r\n  \r\n    console.log('Sending Mail');\r\n    transporter.sendMail(message, function(error){\r\n    if(error){\r\n    console.log('Error occured');\r\n    console.log(error.message);\r\n    return;\r\n    }\r\n  });\r\n  }\r\n\r\nexports.handler = async (event) => {\r\n\r\n\r\n  let body = JSON.parse(event.body)\r\n//   let body = {\r\n//     \"path\": \"create\",\r\n//     \"user_id\": \"\",\r\n//     \"full_name\": \"VikasGuru\",\r\n//     \"Phone_Number\": 9731243153,\r\n//     \"email\": \"vikastheshit@gmail.com\",\r\n//     \"password\": \"System@123\",\r\n//     \"refferred_code\": \"LRN092121\",\r\n//     \"device_info\": {\r\n//         \"isMobile\": true,\r\n//         \"isTablet\": false,\r\n//         \"isDesktop\": false,\r\n//         \"deviceType\": \"Mobile\",\r\n//         \"OS\": \"iOS\",\r\n//         \"osVersion\": \"13.2.3\",\r\n//         \"screen_resolution\": \"390 x 844\",\r\n//         \"userAgent\": \"Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1\",\r\n//         \"IP Address\": \"49.37.169.82\"\r\n//     },\r\n//     \"created_date\": \"\",\r\n//     \"language\": \"\",\r\n//     \"firebase_token\": \"\",\r\n//     \"isActive\": true,\r\n//     \"isBanned\": false,\r\n//     \"isAdmin\": false\r\n// }\r\n\r\n// const newUser = await resendOTP(body);\r\n// return newUser;\r\n// let body = {\r\n//   \"path\": \"create\",\r\n//   \"user_id\": \"\",\r\n//   \"full_name\": \"Vikas Guru\",\r\n//   \"Phone_Number\": 9731243153,\r\n//   \"email\": \"vikastheshit@gmail.com\",\r\n//   \"password\": \"System@123\",\r\n//   \"refferred_code\": \"LRN092121\",\r\n//   \"device_info\": {\r\n//       \"isMobile\": true,\r\n//       \"isTablet\": false,\r\n//       \"isDesktop\": false,\r\n//       \"deviceType\": \"Mobile\",\r\n//       \"OS\": \"Android\",\r\n//       \"osVersion\": \"10\",\r\n//       \"screen_resolution\": \"412 x 915\",\r\n//       \"userAgent\": \"Mozilla/5.0 (Linux; Android 10; SM-G981B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36\",\r\n//       \"IP Address\": \"49.205.248.107\"\r\n//   },\r\n//   \"created_date\": \"\",\r\n//   \"language\": \"\",\r\n//   \"firebase_token\": \"\",\r\n//   \"isActive\": true,\r\n//   \"isBanned\": false,\r\n//   \"isAdmin\": false\r\n// }\r\n\r\n\r\n  console.log(\"body\", body);\r\n  let client;\r\n  if(body.path == \"create\")\r\n  {\r\n\r\n    try {\r\n      // Extract the email from the event (adjust the property name as needed)\r\n      const emailToCheck = body.email;\r\n      const phoneNumberToCheck = body.Phone_Number\r\n  \r\n      // Connect to MongoDB\r\n      client = new MongoClient(MONGODB_URI);\r\n      await client.connect();\r\n  \r\n      const db = client.db('trading-app-dev');\r\n      const collection = db.collection('LEARN_USERS');\r\n  \r\n      // Check if the email exists in the MongoDB collection\r\n      const existingUser = await collection.findOne({ email: emailToCheck });\r\n      const existingPhoneUser = await collection.findOne({ phoneNumber: phoneNumberToCheck });\r\n  \r\n      if (existingUser || existingPhoneUser) {\r\n        // Email exists in the collection, return an error response\r\n        return {\r\n          statusCode: 200,\r\n          'headers': {\r\n            'Access-Control-Allow-Origin': '*'\r\n        },\r\n          body: JSON.stringify({ error: \"Email ID or Phone Number already exists\",responseCode:\"1001\" }),\r\n        };\r\n      } else {\r\n        \r\n  \r\n  \r\n    const lastUserID = await getLastUserID();\r\n    const newUserID = await generateUserID(lastUserID);\r\n    const newUser = await createUserinDB(newUserID,body);\r\n    return newUser;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      return {\r\n        statusCode: 500,\r\n        'headers': {\r\n          'Access-Control-Allow-Origin': '*'\r\n      },\r\n        body: JSON.stringify({ error: \"Internal Server Error from API\" }),\r\n      };\r\n    } finally {\r\n      if (client) {\r\n        client.close();\r\n      }\r\n    }\r\n  \r\n  }\r\n  else if(body.path == \"resend\")\r\n  {\r\n    const resend = await resendOTP(body);\r\n    return resend;\r\n  }\r\n\r\n}\r\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","MongoClient","nodemailer","currentDateAndTime","Date","OTP","Math","floor","random","console","log","randomIndex","referrercode","currentYear","getFullYear","currentMonth","getMonth","currentDay","getDate","currentHours","getHours","currentMinutes","getMinutes","currentSeconds","getSeconds","MONGODB_URI","process","env","cachedDb","handler","async","event","client","body","JSON","parse","path","emailToCheck","email","phoneNumberToCheck","Phone_Number","connect","collection","db","existingUser","findOne","existingPhoneUser","phoneNumber","statusCode","stringify","error","responseCode","lastUserID","LastUserId","find","sort","_id","limit","toArray","close","getLastUserID","newUserID","user","inputStr","user_id","split","incrementedNumber","parseInt","width","length","formattedStr","String","padStart","generateUserID","id","payload","data","full_name","password","device_info","isMobile","isTablet","isDesktop","deviceType","OS","osVersion","screen_resolution","userAgent","language","firebase_token","isActive","refferred_code","insertOne","sendMail","transporter","createTransport","service","host","port","secure","auth","pass","message","from","to","subject","html","Promise","resolve","reject","info","response","sendOTP","userDetails","createUserinDB","resendOTP"],"sourceRoot":""}